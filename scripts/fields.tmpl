// {{if .Nullable}}Null{{end}}{{.TypeName}}Field is a field that can store a {{.Type}}{{if .Nullable}}, can be nil{{end}}
type {{if .Nullable}}Null{{end}}{{.TypeName}}Field struct {
	Field
	data {{if .Nullable}}*{{end}}{{.Type}}
}

func New{{if .Nullable}}Null{{end}}{{.TypeName}}Field(f Field) *{{if .Nullable}}Null{{end}}{{.TypeName}}Field {
	tf := {{if .Nullable}}Null{{end}}{{.TypeName}}Field{}
	tf.Field = f
	return &tf
}

// Scan implements sql.Scanner
func (f *{{if .Nullable}}Null{{end}}{{.TypeName}}Field) Scan(src interface{}) error {
	{{- if eq .Base "Float64" }}
	nf := sql.Null{{.Base}}{}
	err := nf.Scan(src)
	if err != nil {{ if eq .Nullable false }}|| !nf.Valid {{end}} {
		return fmt.Errorf(`Unsupported scan, cannot scan %T into %T`, src, f.data)
	}
	{{- if .Nullable }}
	if !nf.Valid {
		f.data = nil
		return nil
	}
	{{- end}}

	v := {{.Type}}(nf.{{.Base}})
	f.data = {{if .Nullable}}&{{end}}v
	return nil
	{{- else }}
	{{- if .Nullable}}
	if src == nil {
		f.data = nil
		return nil
	}
	{{- end}}
	if v, ok := src.({{if .Base}}{{.Base}}{{else}}{{.Type}}{{end}}); ok {
		{{- if .Base}}
			data := {{.Type}}(v)
		{{- end}}
		f.data = {{if .Nullable}}&{{end}}{{if.Base}}data{{else}}v{{end}}
		return nil
	}
	return fmt.Errorf(`Unsupported scan, cannot scan %T into %T`, src, f.data)
	{{- end }}
}

// Value implements driver.Valuer
func (f *{{if .Nullable}}Null{{end}}{{.TypeName}}Field) Value() (driver.Value, error) {
	return f.data, nil
}

// Get returns the data
func (f *{{if .Nullable}}Null{{end}}{{.TypeName}}Field) Get() {{if .Nullable}}*{{end}}{{.Type}} {
	return f.data
}

// Set updates the data
func (f *{{if .Nullable}}Null{{end}}{{.TypeName}}Field) Set(v {{if .Nullable}}*{{end}}{{.Type}}) {
	f.data = v
}
